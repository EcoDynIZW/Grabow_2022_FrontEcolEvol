---
title: "Red squirrels Berlin: Data Integration model" ## name of your project
author: "Marius Grabow"                     ## your name(s)
date: "`r Sys.Date()`"                  ## current date
output:
  word_document
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE}
## You can ignore this chunk in most cases
## If you want to modify chunk options, you can do it here for all chunks or
## add the options in the repsective chunk header, e.g. `{r, message = FALSE}`
knitr::opts_chunk$set(echo = TRUE, warning = TRUE, message = TRUE,
                      fig.width = 9, fig.height = 6, dpi = 500, 
                      retina = 1)
```


# Setup

```{r packages}
## for non-CRAN packages please keep install instruction
## but commented so it is not run each time, e.g.
# devtools::install_github("EcoDynIZW/template")

## libraries used in this script
## please add ALL LIBRARIES NEEDED HERE
## please remove libraries from the list that are not needed anymore 
## at a later stage
package.list=c("data.table",
               "lattice",
               "raster",
               "ROCR",
               "sp",
               "rgdal",
               "maptools",
               "maps",
               "foreign",
               "rgeos",
               "spatstat",
               "RColorBrewer",
               "spdep",
               "ppmlasso",
               "here",
               "tidyverse",
               "sf",
               "conflicted",
               "grainscape",
               "tmap")


#function that installs and loads the packages 

for (package in package.list) {
  if (!require(package, character.only=T, quietly=T)) {
    install.packages(package)
    library(package, character.only=T)
  }
}

source("Optim Lasso Functions New.R")
```

#Preprocessing of covariates
```{r}

cov_list<-readRDS(here("output","data-proc","cov_100.RDS"))
temp100<-raster(here("data-raw","geo-raw",
                     "template_raster_berlin_10m_2020_3035.tif"))%>%
  aggregate(fact=10)

temp100@data@values<-c(1:ncell(temp100))

cell_number<-as.data.frame(temp100)%>%na.omit()
names(cell_number)<-"cell_number"

list <- cov_list[[1]]
rs <- list(list)
for (i in 1:length(cov_list)) {
    rs[[i]] <- resample(cov_list[[i]], temp100, method='bilinear')
}
rs<-stack(rs)

names(rs)<-c("supply_green",
                    "distance_green",
                 "distance_streets",
                 "pop_density",
                 "imperviousness",
                 "multiple_burdens",
                 "distance_border",
                 "dist_old_tree",
                 "temp_04",
                 "focal_green_capacity",
                 "focal_traffic_volume",
                 "focal_tree_coniferous")


```

# Data preprocessing
```{r data}
study.region = "Berlin"
sp.res = 0.1
po<-readRDS(here("data-raw","citizen_science","sightings_processed.RDS"))
po_xy<-st_coordinates(po)
po_cov<-as.data.frame(extract(rs,po))
po_cov<-cbind(po_xy,po_cov)
po<-po_cov

all_xy<-xyFromCell(temp100,c(1:ncell(temp100)))
all_xy_df<-as.data.frame(xyFromCell(temp100,c(1:ncell(temp100))))
all_xy_df<-st_as_sf(all_xy_df,coords = c("x","y"))
occ<-as.data.frame(extract(rs,all_xy_df))
occ<-cbind(all_xy,occ)





#read camera trap locations
ct_location<-read.csv(here("data-raw",
                    "camera-trap",
                    "centroids_cameras_grid_25833.csv"))%>%
  st_as_sf(coords=c("xcoord_centroid_25833","ycoord_centroid_25833"),crs=25833)%>%
  st_transform(3035)
                    
ct_xy<-st_coordinates(ct_location)

ct_cell_number<-as.data.frame(extract(temp100,ct_location))
names(ct_cell_number)<-"cell_number"

y.occ<-ct_location[,21:24]


ct_cell_number<-cbind(ct_cell_number,y.occ)

y.occ<-plyr::join(cell_number,ct_cell_number,by="cell_number")
y.occ<-distinct(y.occ, cell_number, .keep_all = TRUE)
y.occ[is.na(y.occ)]<-0
y.occf <- y.occ[,c(-1,-2)]

size_vec<-y.occ$cell_number
occ2<-occ[c(size_vec),]
occ<-occ2
#remove all, but keep processed data needed for further analyses

#rm(list = ls()[!ls() %in% c("po","y.occf","occ")])
source(here("R","Optim Lasso Functions New.R"))

colnames(occ)<-colnames(po)
X.all  = rbind(po, occ) %>%na.omit()

#taking out the number of rows of each dataset
num.po = dim(po)[1] 
num.occ = dim(occ)[1] 

po.id  = 1:num.po
occ.id = (num.po + 1):(num.po + num.occ)

quad.id = occ.id

#recreating the datasets, now that we worked with it 
po = X.all[po.id,]
occ = X.all[occ.id,]
quad.dat = X.all[quad.id,]

# transform all covariates m -> km
quad.km = m_to_km(quad.dat)
po.km = m_to_km(po)
occ.km = m_to_km(occ)


env_formula = ~distance_green+
                 distance_streets+
                 pop_density+
                 imperviousness+
                 dist_old_tree+
                 focal_green_capacity

bias_formula =  list(~distance_streets + pop_density,
                     ~distance_streets + pop_density)

# misc quantities to set up
n.fits = 1000 #number of fits
int.radius = 300
tol = 1.e-8
b.min = 1.e-6
link = "cloglog"

po.km$X <- round(po.km$X, 3)
po.km$Y <- round(po.km$Y, 3)
occ.km$X <- round(occ.km$X,3)
occ.km$Y <- round(occ.km$Y,3)
quad.km$X <- round(quad.km$X,3)
quad.km$Y <- round(quad.km$Y,3)

###why?
which(is.na(quad.km), arr.ind=TRUE)#90911:90924
quad.km<-na.omit(quad.km)
quad.km<-na.omit(quad.km)
occ.km<-na.omit(occ.km)
occ<-na.omit(occ)
quad.dat<-na.omit(quad.dat)
y.occf<-y.occf[-c(90911:90924),]

saveRDS(occ,here("output","data-proc","occ_comb.RDS"))
occ<-readRDS(here("output","data-proc","occ_comb.RDS"))
#taking out the number of rows of each dataset
num.po = dim(po)[1] 
num.occ = dim(occ)[1] 

po.id  = 1:num.po
occ.id = (num.po + 1):(num.po + num.occ)

quad.id = occ.id
```

#runs an analysis combining presence-only and occupancy 

```{r,eval=FALSE,echo=TRUE}
# standard PPP model :
comb_ppm = comb.lasso_new(env_formula = env_formula,
                          bias_formula = bias_formula,
                          intercept_env = 1,
                          intercept_bias = list(NA, 1),
                          quad_data = quad.km,
                          sp_data = list(po.km, occ.km),#here the two datasets
                          sp_y = list(rep(1, length(po.id)), y.occf),
                          dat.type = c("PO", "Occ"), #specifying the two data types
                          coord = c("X", "Y"),
                          sp_res = 0.1, #resolution in km
                          penalty_vec = NULL,
                          alpha = 1, gamma = 0, init.coef = NA, standardise = TRUE,
                          family = "poisson", tol = tol, b.min = b.min,
                          max.it = 25, n.fits = n.fits, noshrink = NULL, method = "BFGS",
                          link = link, site.area = 0.01,
                          area.int = FALSE, r = NULL)


pdf("comb_ppm_new.pdf")
plotpath(comb_ppm)
criterion_curve(comb_ppm)
dev.off()

my.palette <- brewer.pal(n = 100, name = "OrRd")
my.palette


plotfit(comb_ppm)
plotfit(comb_ppm, z = "occupancy",my.palette, cuts = 5)
plotfit(comb_ppm,source = 2, z = "intensity",my.palette, cuts = 5)
plotfit(comb_ppm, z = "p_detect")
plotfit(comb_ppm, z = "bias")
plotfit(comb_ppm, z = "bias", source = 2)
plotfit(comb_ppm, z = "occupancy", link == "cloglog")
plotfit(comb_ppm,source=2,z="occupancy")
criterion_curve(comb_ppm)


saveRDS(comb_ppm, file = here("output","comb_ppm.RDS"))

# Penalised PPP model :

comb_ad_ppm = comb.lasso_new(env_formula = env_formula,
                          bias_formula = bias_formula,
                          intercept_env = 1,
                          intercept_bias = list(NA, 1),
                          quad_data = quad.km,
                          sp_data = list(po.km, occ.km),#here the two datasets
                          sp_y = list(rep(1, length(po.id)), y.occf),
                          dat.type = c("PO", "Occ"), #specifying the two data types
                          coord = c("X", "Y"),
                          sp_res = 0.1, #resolution in km
                          penalty_vec = NULL,
                          alpha = 1, gamma = 1, init.coef = comb_ppm$betas[,1], standardise = TRUE,
                          family = "poisson", tol = tol, b.min = b.min,
                          max.it = 25, n.fits = n.fits, noshrink = NULL, method = "BFGS",
                          link = link, site.area = 0.01,
                          area.int = FALSE, r = NULL)

saveRDS(comb_ad_ppm, file = here("output","comb_ad_ppm.RDS"))

plotfit(comb_ad_ppm)
plotfit(comb_ad_ppm, z = "occupancy",my.palette, cuts = 5)
plotfit(comb_ad_ppm,source = 2, z = "intensity",my.palette, cuts = 5)
plotfit(comb_ad_ppm, z = "p_detect")
plotfit(comb_ad_ppm, z = "bias")
plotfit(comb_ad_ppm, z = "bias", source = 2)
plotfit(comb_ad_ppm, z = "occupancy", link == "cloglog")
plotfit(comb_ad_ppm,source=2,z="occupancy")

criterion_curve(comb_ad_ppm)
plotpath(comb_ad_ppm)
comb_ad_ppm$beta
```

```{r,eval=FALSE,echo=TRUE}
source(here("R","Optim Lasso Functions New.R"))
comb_ppm<-readRDS(file = here("output","comb_ppm.RDS"))
comb_ad_ppm<-readRDS(file = here("output","comb_ad_ppm.RDS"))
comb_ad_prediction<-plotfit(comb_ad_ppm)
comb_ad_prediction<-data.frame(comb_ad_prediction[["panel.args.common"]][["z"]])
names(comb_ad_prediction)<-"prediction"
comb_ad_prediction<-comb_ad_prediction[-c(90911:90924),]

occ<-readRDS(here("output","data-proc","occ_comb.RDS"))
r<-occ[,1:2]
r<-cbind(r,comb_ad_prediction)



levelplot(r$comb_ad_prediction ~ r$X + r$Y, col.regions=hcl.colors(100))

#create raster from predictions
raster<-rasterFromXYZ(r)
crs(raster)<-CRS('+init=EPSG:3035')
#raster<-raster>0.5
#visualize


#cutout waterbodies, PPM does not account for that

water<-readOGR(here("data-raw","geo-raw","Berlin-shapefiles",
                    "gis_osm_water_a_free_1.shp"))%>%spTransform(CRS("+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80
+units=m +no_defs "))

water<-rasterize(water,raster,field=1)
crs(water)

habitat<-mask(raster,water,inverse=TRUE,updatevalue=0)
plot(habitat)

bias1<-plotfit(comb_ad_ppm, z = "bias")
bias1<-data.frame(bias1[["panel.args.common"]][["z"]])
names(bias1)<-"bias from source 1"
bias1<-cbind(r[,1:2],bias1[-c(90911:90924),])
raster_bias1<-rasterFromXYZ(bias1)
crs(raster_bias1)<-CRS('+init=EPSG:3035')


bias2<-plotfit(comb_ad_ppm, z = "bias",source = 2)
bias2<-data.frame(bias2[["panel.args.common"]][["z"]])
names(bias2)<-"bias from source 2"
bias2<-cbind(r[,1:2],bias2[-c(90911:90924),])
raster_bias2<-rasterFromXYZ(bias2)
crs(raster_bias2)<-CRS('+init=EPSG:3035')

detection_prob<-plotfit(comb_ad_ppm, z = "p_detect")
detection_prob<-data.frame(detection_prob[["panel.args.common"]][["z"]])
names(detection_prob)<-"detection probability source 2"
detection_prob<-cbind(r[,1:2],detection_prob[-c(90911:90924),])
raster_det_prob<-rasterFromXYZ(detection_prob)
crs(raster_det_prob)<-CRS('+init=EPSG:3035')
```

```{r,eval=FALSE,echo=TRUE}
tmap_mode("plot")

p1<-tm_shape(habitat)+
  tm_raster(palette = "viridis", 
            title = "suitability",
            alpha=1)

tmap_save(p1,here("plots","comb_ad_ppm_habitat.png"))


p2<-tm_shape(raster_bias1/100) +
  tm_raster(palette = "Reds", 
            title = "bias 1",
            alpha=1)+
  tm_layout(legend.position = c("right", "top"),
            legend.title.size = 2,
            legend.text.size = 1.5,
            legend.outside = TRUE)+
  tm_credits("B", position=c("left", "top"),size=3)

p2

tmap_save(p2,here("plots","comb_ad_ppm_bias1.png"))

p3<-tm_shape(raster_bias2) +
  tm_raster(palette = "Reds", 
            title = "bias 2",
            alpha=1)+
  tm_layout(legend.position = c("right", "top"),
            legend.title.size = 2,
            legend.text.size = 1.5,
            legend.outside = T)+
  tm_credits("C", position=c("left", "top"),size=3)

p3
tmap_save(p3,here("plots","comb_ad_ppm_bias2.png"))

p4<-tm_shape(raster_det_prob) +
  tm_raster(palette = "Reds", 
            title = "Detection Prob.",
            alpha=1)+
  tm_layout(legend.position = c("right", "top"))

tmap_save(p4,here("plots","comb_ad_ppm_detection.png"))

writeRaster(habitat,here("output","geo-proc","habitat_comd_ad_ppm.tif"))
```

```{r}
obs_all<-readRDS(here("output","data-proc","obs_ct_confirmed_and_sightings_filter.RDS"))

Berlin_shape<-readOGR(here("data-raw",
                           "geo-raw",
                           "Berlin-shapefiles",
                          "gis_osm_places_a_free_1.shp")) %>% spTransform(CRS("+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000
+ellps=GRS80 +units=m +no_defs ")) 

Berlin_poly<-as(Berlin_shape,"SpatialPolygons")%>%as("owin")

# obs_sp<-as_Spatial(obs_all)%>%as("SpatialPoints")%>%as("ppp")
# obs_sp$window<-Berlin_poly
# plot(obs_sp,pch=16)

po<-readRDS(here("output","data-proc","po_buffer.RDS"))
obs_sp<-as_Spatial(po)%>%as("SpatialPoints")%>%as("ppp")
obs_sp$window<-Berlin_poly

envelope_inhom<-envelope(obs_sp,
                         Kinhom,
                         nsim = 10,
                         nrank = 1,
                         global=TRUE)

plot(envelope_inhom, main = "Global Envelopes")
```


***

<details><summary>Session Info</summary>

```{r sessionInfo}
## DO NOT REMOVE!
## We store the settings of your computer and the current versions of the
## packages used to allow for reproducibility
Sys.time()
#git2r::repository() ## uncomment if you are using GitHub
sessionInfo()
```

</details>


